class Kookie {
  set(name: string, value: any, { options }: { options: any } = { options: {} }) {
    const { res, expires, path, ...restOptions } = options || {};

    if (typeof document !== 'undefined') {
      document.cookie = `${name}=${value};path=${path || '/'};expires=${this.setExpireDate(expires)}`;
    }

    if (res?.setHeader) {
      res.setHeader('Set-Cookie', `${name}=${value};path=${path || '/'};expires=${this.setExpireDate(expires)}`);
    }

    if (res?.cookie) {
      res.cookie(name, value, { maxAge: this.setExpireDate(expires, res), path: path || '/' });
    }
  }

  setMultiple(cookieList: any[], res?: any) {
    cookieList.map((cookie) => {
      const { name, value, ...rest } = cookie || {};
      this.set(name, value, { options: { res, ...rest } });
    });
  }

  get(name: string, req?: any) {
    try {
      let cookies = '';
      if (typeof document !== 'undefined') cookies = document.cookie;
      if (req) cookies = req.headers.cookie;
      const targetCookie = cookies.match(`(^|;) ?${name}=([^;]*)(;|$)`);

      if (cookies && targetCookie) {
        const unescapedName = unescape(targetCookie[2]);
        return [`[`, `{`].some((el) => unescapedName.includes(el)) ? JSON.parse(unescapedName) : unescapedName;
      }
    } catch (e) {
      return undefined;
    }
  }

  getMultiple(names: any[], req?: any) {
    const allCookies = req ? this.getAll(req) : typeof document !== 'undefined' ? this.getAll() : {};
    let matchCookies = {};
    names.map((name) => (matchCookies[name] = allCookies[name]));
    return matchCookies;
  }

  getAll(req?: any) {
    let formattedCookies = [];
    let allCookies = {};
    if (typeof document !== 'undefined') formattedCookies = document.cookie.split(';');
    if (req) formattedCookies = req?.headers?.cookie?.split(';');

    formattedCookies?.length &&
      formattedCookies.map((cookie) => {
        const cookieName = cookie.split('=')[0].trim();
        allCookies[cookieName] = this.get(cookieName, req);
      });
    return allCookies;
  }

  remove(name: string, res?: any) {
    if (typeof document !== 'undefined') document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';

    if (res?.setHeader) {
      res.setHeader('Set-Cookie', name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;');
    }

    if (res?.clearCookie) res.clearCookie(name);
  }

  removeMultiple(names: any[], res?: any) {
    names.map((name) => this.remove(name, res));
  }

  removeAll(req?: any, res?: any) {
    let allCookies = [];
    if (req) allCookies = req.headers.cookie.split(';');
    if (typeof document !== 'undefined') allCookies = document.cookie.split(';');
    allCookies.map((cookieItem) => this.remove(cookieItem.split('=')[0], res));
  }

  private setExpireDate(expire: number, res?: any) {
    const expireTime = 24 * 60 * 60 * 1000 * (+expire || 365);

    if (res) {
      return expireTime;
    } else {
      let date = new Date();
      date.setTime(date.getTime() + expireTime);
      return date.toUTCString();
    }
  }
}
export default new Kookie();
